// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Route {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  driverId  String    @unique
  driver    Driver    @relation(fields: [driverId], references: [id])
  addresses Address[]
  date      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Customer {
  id          String   @id @default(cuid())
  fullName    String
  phoneNumber String   @unique
  email       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  address     Address?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Address {
  id         String   @id @default(cuid())
  city       String
  street     String
  postalCode String
  coords     String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
  routeId    String?
  route      Route?   @relation(fields: [routeId], references: [id])
  index      Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Driver {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  fullName    String
  phoneNumber String
  routes      Route[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  drivers       Driver[]
  customers     Customer[]
  address       Address[]
  routes        Route[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
